---
- name: Wait for girder to report version
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    get:
      path: "system/version"
    token: None
  register: ret
  until: "ret and ret.get('gc_return') and ret.get('gc_return', {}).get('release')"
  delay: 1
  retries: 300
  when: docker is defined

- name: Rebuild girder if the static_public_path is not the default.
  shell: |
    export PATH="{{ girder_virtualenv }}/bin:$PATH"
    if grep static_public_path /home/{{ girder_exec_user }}/.girder/girder.cfg | grep -v '"/static"'; then rebuild_and_restart_girder.sh; fi
  args:
    executable: /bin/bash

- name: Create directory for logs
  file: state=directory path="{{ root_dir }}/logs"

- name: Create directory for assetstore
  file: state=directory path="{{ root_dir }}/assetstore"

- name: Ensure files that may be shared are owned by the right user and are public
  file:
    path: "{{ item }}"
    owner: "{{ girder_exec_user }}"
    group: "{{ girder_exec_group }}"
    mode: u=rwX,g=rX,o=rX
    recurse: yes
  with_items:
    - "{{ root_dir }}/logs"
    - "{{ root_dir }}/assetstore"
  become: true

- name: Create directory for mounts
  file: state=directory path="{{ root_dir }}/mounts"
  when: docker is defined

- name: Ensure mounts directory is owned by the right user and is public
  file:
    path: "{{ root_dir }}/mounts"
    owner: "{{ girder_exec_user }}"
    group: "{{ girder_exec_group }}"
    mode: u=rwX,g=rX,o=rX
    recurse: false
  become: true
  when: docker is defined

- name: Restart girder as a service
  service: name=girder state=restarted enabled=yes
  become: true
  when: docker is undefined

- name: Wait for girder startup
  wait_for:
    port: "{{ girder_socket_port }}"
    delay: 1

- name: Ensure girder admin user exists
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    user:
      firstName: admin
      lastName: admin
      password: "{{ girder_admin_password }}"
      login: "{{ girder_admin_user }}"
      email: "{{ girder_admin_email }}"
      admin: yes
    state: present
  when: girder_no_create_admin is undefined

- name: Restart girder as a service
  service: name=girder state=restarted enabled=yes
  become: true
  when: docker is undefined

- name: Restart girder by touching config file
  become: true
  file:
    path: /home/{{ girder_exec_user }}/.girder/girder.cfg
    state: touch
  when: docker is defined

- name: Wait for girder startup
  wait_for:
    port: "{{ girder_socket_port }}"
    delay: 1

- name: Wait for girder to report version
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    get:
      path: "system/version"
    token: None
  register: ret
  until: "ret and ret.get('gc_return') and ret.get('gc_return', {}).get('release')"
  delay: 1
  retries: 300
  when: docker is defined

- name: Set worker broker setting
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: worker.broker
        value: "amqp://guest:guest@{{ mq_private_ip }}/"

- name: Set worker backend setting
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: worker.backend
        value: "rpc://guest:guest@{{ mq_private_ip }}/"

- name: Set worker api url setting
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: worker.api_url
        value: "{{ girder_api_url }}"

- name: Set the DSA brand name setting
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: "core.brand_name"
        value: "Digital Slide Archive"

- name: Set the histomics webroot setting.
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: "histomicsui.webroot_path"
        value: "histomics"

- name: Set the histomics alternate webroot setting.
  # The default allows ./histomics to work.  This allows the deprecated
  # ./histomicstk to continue to work.
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: "histomicsui.alternate_webroot_path"
        value: "histomicstk"

- name: Set homepage markdown setting
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: homepage.markdown
        value: |
          # Digital Slide Archive
          ---
          ## Bioinformatics Platform

          Welcome to the **Digital Slide Archive**.

          Developers who want to use the Girder REST API should check out the [interactive web API docs](api/v1).

          The [HistomicsUI](histomics) application is enabled.

- name: Get assetstore list
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    get:
      path: "/assetstore"
  register: assetstore_list

- name: Ensure the existence of the filesystem assetstore
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    assetstore:
      name: default
      type: filesystem
      root: "{{ root_dir }}/assetstore"
      current: true
    state: present
  when: assetstore_list['gc_return']|length == 0

- name: Get assetstore list
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    get:
      path: "/assetstore"
  register: assetstore_list

- name: Ensure the existence of the TCGA collection
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    collection:
      name: TCGA
      public: yes
    state: present
  register: tcga_collection
  tags: data_import

- name: Ensure the existence of the sample images folder
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    folder:
      parentType: collection
      parentId: "{{ tcga_collection['gc_return']['_id'] }}"
      name: "Sample Images"
      public: yes
    state: present
  register: sample_images_folder
  when: docker is defined
  tags: data_import

- name: Ensure the existence of the Tasks collection
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    collection:
      name: Tasks
      public: yes
    state: present
  when: docker is defined
  register: tasks_collection

- name: Ensure the existence of the Slicer CLI Web Tasks folder
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    folder:
      parentType: collection
      parentId: "{{ tasks_collection['gc_return']['_id'] }}"
      name: "Slicer CLI Web Tasks"
      public: yes
    state: present
  register: slicer_cli_tasks_folder
  when: docker is defined

- name: Set the slicer_cli_web default folder
  girder:
    port: "{{ girder_socket_port|string }}"
    scheme: "{{ girder_socket_scheme }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: slicer_cli_web.task_folder
        value: "{{ slicer_cli_tasks_folder['gc_return']['_id'] }}"
  when: docker is defined

- name: Update from version 2.x as needed
  shell: >
    mongo mongodb://{{ mongo_private_ip }}/girder --quiet --eval 'db.item.updateMany({"largeImage.sourceName": "svs"}, {$set: {"largeImage.sourceName": "openslide"}})'
  register: update_output

- name: Show update from version 2.x results
  debug: var=update_output.stdout_lines

- name: Install CLI
  shell: "{{ girder_virtualenv }}/bin/python cli_test.py --username {{ girder_admin_user|quote }} --password {{ girder_admin_password|quote }} --apiurl {{ girder_socket_scheme|quote }}://127.0.0.1:{{ girder_socket_port }}/api/v1 {{ cli_image|quote }}"
  args:
    chdir: "{{ root_dir }}"
  register: test_output
  no_log: true
  when: docker is defined and cli_image is defined and cli_image_test is undefined

- name: Show test CLI results (stdout)
  debug: var=test_output.stdout_lines
  when: docker is defined and cli_image is defined and cli_image_test is undefined

- name: Show test CLI results (stderr)
  debug: var=test_output.stderr_lines
  when: docker is defined and cli_image is defined and cli_image_test is undefined

- name: Install and test CLI
  shell: "{{ girder_virtualenv }}/bin/python cli_test.py --username {{ girder_admin_user|quote }} --password {{ girder_admin_password|quote }} --apiurl {{ girder_socket_scheme|quote }}://127.0.0.1:{{ girder_socket_port }}/api/v1 --test {{ cli_image|quote }}"
  args:
    chdir: "{{ root_dir }}"
  register: test_output
  no_log: true
  when: docker is defined and cli_image is defined and cli_image_test is defined

- name: Show test CLI results (stdout)
  debug: var=test_output.stdout_lines
  when: docker is defined and cli_image is defined and cli_image_test is defined

- name: Show test CLI results (stderr)
  debug: var=test_output.stderr_lines
  when: docker is defined and cli_image is defined and cli_image_test is defined
