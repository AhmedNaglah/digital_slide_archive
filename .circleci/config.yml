---
version: 2.1
commands:
  usedockers:
    description: "Make built dockers available"
    steps:
      - run:
          name: Install dependencies
          command: pip install ansible requests docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived docker images
          command: |
            docker load -i /tmp/workspace/dsa_girder.tar
            docker load -i /tmp/workspace/dsa_worker.tar
  usecommondocker:
    description: "Make built common docker available"
    steps:
      - run:
          name: Install dependencies
          command: pip install ansible requests docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived common docker image
          command: |
            docker load -i /tmp/workspace/dsa_common.tar
  startcontainers:
    description: Start containers for tests.
    steps:
      - run:
          name: Start containers.
          command: export TERM=xterm && python ansible/deploy_docker.py start --no-cli --no-retry
jobs:
  build:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: pip3 install -U pip
      - run:
          name: Install dependencies
          command: pip3 install ansible requests docker
      - run:
          name: Build the dockers
          command: export TERM=xterm && python3 ansible/deploy_docker.py build
      - run:
          name: Archive docker images
          command: |
            docker save -o dsa_girder.tar dsarchive/dsa_girder:latest
            docker save -o dsa_worker.tar dsarchive/dsa_worker:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./dsa_girder.tar
            - ./dsa_worker.tar
      - store_artifacts:
          path: ./dsa_girder.tar
      - store_artifacts:
          path: ./dsa_worker.tar
  test-cli:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - run:
          name: Start containers and run cli test.
          command: export TERM=xterm && python ansible/deploy_docker.py start --cli-test
      - run:
          name: Show Girder logs to allow easier review
          command: |
            echo "=== info.log ==="
            cat ~/.dsa/logs/info.log
            echo "=== girder.log ==="
            cat ~/.dsa/logs/girder.log
            echo "=== worker.log ==="
            cat ~/.dsa/logs/worker.log
            echo "=== mount.log ==="
            cat ~/.dsa/logs/mount.log
  test-proxy:
    # This tests injecting a custom config file and proxy path locations
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - run:
          name: Install nginx
          command: |
            sudo apt-get update
            sudo apt-get install -y nginx
      - run:
          name: Start nginx
          command: |
            sudo cp .circleci/dsa_proxy.nginx /etc/nginx/sites-available/default
            sudo service nginx restart
      - run:
          name: Start containers
          command: export TERM=xterm && python ansible/deploy_docker.py start --cfg=.circleci/dsa_proxy.cfg
      - run:
          name: "Wait for girder to be available"
          command: |
            for f in `seq 120`; do curl --silent 'http://127.0.0.1/dsa/api/v1/system/version' | tac | tac | grep -q 'release' && break; sleep 1; done
      - run:
          name: "Check that we can read from the api and static assets in the proxy path locations"
          # grep -q will close its connection as soon as it finds a match, but
          # curl with throw an error 23 when that occurs.  Piping through a
          # program that reads the entire contents avoids this problem.
          # grepping unquietly first does this.
          command: |
            curl --silent 'http://127.0.0.1/dsa/'
            curl --silent 'http://127.0.0.1/dsa/api/v1/system/version'
            curl --silent 'http://127.0.0.1/dsa/static/built/plugins/large_image/extra/geojs.js' | head || true
            curl --silent 'http://127.0.0.1/dsa/' | grep '/dsa/static/built/plugins/large_image' | grep -q '/dsa/static/built/plugins/large_image' && echo 'correct references'
            curl --silent 'http://127.0.0.1/dsa/api/v1/system/version' | grep 'release' | grep -q 'release' && echo 'reports version'
            curl --silent 'http://127.0.0.1/dsa/static/built/plugins/large_image/extra/geojs.js' | grep 'createRenderer' | grep -q 'createRenderer' && echo 'can reach geojs'
      - run:
          name: Show Girder logs to allow easier review
          command: |
            echo "=== info.log ==="
            cat ~/.dsa/logs/info.log
            echo "=== girder.log ==="
            cat ~/.dsa/logs/girder.log
            echo "=== worker.log ==="
            cat ~/.dsa/logs/worker.log
            echo "=== mount.log ==="
            cat ~/.dsa/logs/mount.log
  test-girder-build:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - startcontainers
      - run:
          name: Ensure that we can rebuild girder
          command: docker exec dsa_girder bash -lc 'girder build'
      - run:
          name: Check number of files owned by ubuntu user in girder container
          command: |
            docker run --rm -it --entrypoint bash dsarchive/dsa_girder:latest -c "echo -n 'Files that need chown: ' ; find / -xdev -uid 1000 -or -gid 1000 2>/dev/null | wc -l"
          # We should add a test that if it is over some threshold to fail
      - run:
          name: Check number of files owned by ubuntu user in worker container
          command: |
            docker run --rm -it --entrypoint bash dsarchive/dsa_worker:latest -c "echo -n 'Files that need chown: ' ; find / -xdev -uid 1000 -or -gid 1000 2>/dev/null | wc -l"
          # We should add a test that if it is over some threshold to fail
      - run:
          name: Show docker logs for easier debug.
          command: |
            docker logs dsa_girder
            docker logs dsa_worker
  test-py36:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - startcontainers
      - run:
          name: Ensure that we can run tests
          command: docker exec dsa_girder bash -lc 'tox -e py36'
  test-py37:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - startcontainers
      - run:
          name: Ensure that we can run tests
          command: docker exec dsa_girder bash -lc 'tox -e py37'
  test-py38:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - startcontainers
      - run:
          name: Ensure that we can run tests
          command: docker exec dsa_girder bash -lc 'tox -e py38'
  test-py39:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - startcontainers
      - run:
          name: Ensure that we can run tests
          command: docker exec dsa_girder bash -lc 'tox -e py39'
  test-lint:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - startcontainers
      - run:
          name: Ensure that we can run tests
          command: docker exec dsa_girder bash -lc 'tox -e flake8,lintclient'
  docker-compose:
    working_directory: ~/project
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Use Python 3.7
          command: |
            pyenv versions
            pyenv global 3.7.0
            pip --version
      - run:
          name: Run docker-compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker-compose up --build -d'
          working_directory: ./devops/dsa
      - run:
          name: Archive docker images
          command: |
            docker save -o dsa_common.tar dsarchive/dsa_common:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./dsa_common.tar
      - store_artifacts:
          path: ./dsa_common.tar
      - run:
          name: Update modules
          command: pip install -U pip requests
      - run:
          name: Install modules needed for testing
          command: pip install girder-client six
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 60`; do if curl --silent http://localhost:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
            for f in `seq 60`; do if curl --silent 'http://localhost:8080/api/v1/folder?text=Slicer%20CLI%20Web%20Tasks' | grep 'Tasks'; then break; fi; sleep 1; done
      - run:
          name: Grant permissions to docker socket.
          # This is better done by adding the user in the docker container to the group, but that complicates the docker-compose example.
          command: sudo chmod a+xwr /var/run/docker.sock
      - run:
          name: Test the instance
          command: python devops/dsa/utils/cli_test.py dsarchive/histomicstk:latest --user=admin --password=password --test
  publish-docker:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - usedockers
      - run:
          name: Load archived common docker image
          command: |
            docker load -i /tmp/workspace/dsa_common.tar
      - run:
          name: Publish images to Docker Hub
          command: |
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker push dsarchive/dsa_worker:latest
              docker push dsarchive/dsa_girder:latest
              docker push dsarchive/dsa_common:latest
              if [[ $CIRCLE_TAG =~ ^v.*$ ]]; then
              docker tag dsarchive/dsa_worker:latest "dsarchive/dsa_worker:$CIRCLE_TAG"
              docker tag dsarchive/dsa_girder:latest "dsarchive/dsa_girder:$CIRCLE_TAG"
              docker tag dsarchive/dsa_common:latest "dsarchive/dsa_common:$CIRCLE_TAG"
              docker push "dsarchive/dsa_worker:$CIRCLE_TAG"
              docker push "dsarchive/dsa_girder:$CIRCLE_TAG"
              docker push "dsarchive/dsa_common:$CIRCLE_TAG"
              fi
  docs:
    docker:
      - image: circleci/ruby:2
    steps:
      - checkout
      - run:
          name: Bundle install
          command: |
            cd docs
            bundle install
            bundle update
      - run:
          name: Build docs
          command: |
            cd docs
            mkdir /tmp/artifacts
            bundle exec jekyll build -d /tmp/artifacts --baseurl /0/tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  version: 2
  ci:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-cli:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-proxy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-girder-build:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-py36:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-py37:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-py38:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-py39:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-lint:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - docker-compose:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - publish-docker:
          requires:
            - test-cli
            - test-girder-build
            - test-lint
            - test-py36
            - test-py37
            - test-py38
            - test-py39
            - docker-compose
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - master
      - docs:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
  # We want to run a build periodically to make sure it still works and to use
  # all dependent libraries.  To republish dockers sooner, a build can be rerun
  # manually.
  periodic:
    triggers:
      - schedule:
          # Run every Monday morning at 7 a.m.
          cron: "0 7 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - test-cli:
          requires:
            - build
      - test-proxy:
          requires:
            - build
      - test-girder-build:
          requires:
            - build
      - test-py36:
          requires:
            - build
      - test-py37:
          requires:
            - build
      - test-py38:
          requires:
            - build
      - test-py39:
          requires:
            - build
      - test-lint:
          requires:
            - build
      - docker-compose
      - docs
      - publish-docker:
          requires:
            - test-cli
            - test-girder-build
            - test-lint
            - test-py36
            - test-py37
            - test-py38
            - test-py39
            - docker-compose
